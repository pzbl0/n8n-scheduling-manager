{
  "name": "scheduling-operation",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "db_name"
            },
            {
              "name": "calendar_id"
            },
            {
              "name": "client_id",
              "type": "number"
            },
            {
              "name": "query"
            },
            {
              "name": "operation"
            },
            {
              "name": "event_date"
            },
            {
              "name": "client_name"
            },
            {
              "name": "event_reason"
            },
            {
              "name": "event_duration"
            },
            {
              "name": "ranges_to_schedule"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -4464,
        208
      ],
      "id": "cb1c961c-5392-41c9-b34f-1384ebbda2b6",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -4688,
        16
      ],
      "id": "c2b6345c-90a3-4095-8ed9-fe1f8cfd694a",
      "name": "When chat message received",
      "webhookId": "1ba7069e-345d-44cd-818b-48a285bd5242"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "={{ $('data').first().json.table_name }}",
        "filters": {
          "conditions": [
            {
              "keyName": "event_code",
              "condition": "eq",
              "keyValue": "={{ $('set-event').item.json.output.event_code }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "event_at",
              "fieldValue": "={{ $('set-date').item.json.output.event_from }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -112,
        -384
      ],
      "id": "9caff2d7-2e00-4d1d-ba7a-32088125f77c",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "P1SLKYyLcSTAAHKz",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "={{ $('data').first().json.table_name }}",
        "filters": {
          "conditions": [
            {
              "keyName": "event_code",
              "condition": "eq",
              "keyValue": "={{ $('set-event').item.json.output.event_code }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1152,
        128
      ],
      "id": "d6ea6ece-554d-4287-a547-adc5b42182d0",
      "name": "Delete a row",
      "credentials": {
        "supabaseApi": {
          "id": "P1SLKYyLcSTAAHKz",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2448,
        416
      ],
      "id": "bb9ef8bc-09d6-4e6c-98f4-a07a24ac70c5",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2320,
        416
      ],
      "id": "e0168b70-3ab2-4e98-870e-65b87ffbda1b",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "69f8ba88-8cac-4c44-bdfb-f10b03ca6eba",
              "name": "table_name",
              "value": "={{ $json.db_name }}",
              "type": "string"
            },
            {
              "id": "1bdad985-9c1d-49d8-a82c-305b49791f2f",
              "name": "calendar_id",
              "value": "={{ $json.calendar_id }}",
              "type": "string"
            },
            {
              "id": "f86d4606-e178-40b2-8211-608819ac69e3",
              "name": "client_id",
              "value": "={{ $json.client_id }}",
              "type": "string"
            },
            {
              "id": "b44ad566-7d8b-4b1d-96cb-c2f516aeb464",
              "name": "query",
              "value": "={{ $json.query }}",
              "type": "string"
            },
            {
              "id": "59b691ea-680c-43d7-9af9-48db584163b6",
              "name": "operation",
              "value": "={{ $json.operation }}",
              "type": "string"
            },
            {
              "id": "e2d83081-b2bf-4981-9b83-7c20e4090b1b",
              "name": "event_date",
              "value": "={{ $json.event_date }}",
              "type": "string"
            },
            {
              "id": "2b130557-c95b-48e3-b01b-f9b3e9fda84d",
              "name": "client_name",
              "value": "={{ $json.client_name }}",
              "type": "string"
            },
            {
              "id": "72b3132a-7b18-45e3-90ee-019bc0af2d8c",
              "name": "event_reason",
              "value": "={{ $json.event_reason }}",
              "type": "string"
            },
            {
              "id": "729d4806-ab20-4eb2-b5c5-b66754790105",
              "name": "event_duration",
              "value": "={{ $json.event_duration }}",
              "type": "string"
            },
            {
              "id": "1a75f203-45e6-4151-b644-c39a3f8dd478",
              "name": "ranges_to_schedule",
              "value": "={{ $json.ranges_to_schedule }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4240,
        112
      ],
      "id": "b7657e20-d972-4e83-a9ae-dcef6bedc832",
      "name": "data"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"event_code\": {\n      \"type\": [\"string\", null]\n    },\n    \"fallback\": {\n      \"type\": [\"string\", null]\n    }\n  },\n  \"additionalProperties\": false\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -2192,
        416
      ],
      "id": "44835c5f-64f4-4c9b-b333-789454ad95df",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2112,
        624
      ],
      "id": "50e5e9f3-8d4a-442c-b5d4-08ecda761afa",
      "name": "OpenAI Chat Model9",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1392,
        -368
      ],
      "id": "faff0ac0-ba0b-4e07-bd7f-d0cd9983f5b2",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1264,
        -368
      ],
      "id": "6153f50c-01b2-4c65-b212-ef67a25225bf",
      "name": "OpenAI Chat Model11",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"event_from\": {\n      \"type\": \"string\"\n    },\n    \"event_to\": {\n      \"type\": \"string\"\n    },\n    \"available\": {\n      \"type\": \"boolean\"\n    },\n    \"fallback\": {\n      \"type\": [\"string\", null]\n    }\n  },\n  \"additionalProperties\": false\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1008,
        -368
      ],
      "id": "fe167577-ba53-4ec6-8933-b130edd17636",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -928,
        -160
      ],
      "id": "723c9330-7d1b-4858-98a2-e576c91476af",
      "name": "OpenAI Chat Model12",
      "credentials": {
        "openAiApi": {
          "id": "leOLHYOtXey0DgzA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ad9ef517-a9a8-4591-91fe-704d05357f1d",
                    "leftValue": "={{ $('data').item.json.operation }}",
                    "rightValue": "get-availability",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get-availability"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a52c5b0-b3e1-4b15-97f3-ba5cfb4e4260",
                    "leftValue": "={{ $('data').item.json.operation }}",
                    "rightValue": "create-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "create-event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "13f11993-92ac-426f-9b62-25739b3ebe08",
                    "leftValue": "={{ $('data').item.json.operation }}",
                    "rightValue": "get-events",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get-events"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f1dc42f1-100f-4570-9dee-1c60894aa61a",
                    "leftValue": "={{ $('data').item.json.operation }}",
                    "rightValue": "update-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "update-event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2918830e-4d1d-4fde-9460-be5c4a42026f",
                    "leftValue": "={{ $('data').item.json.operation }}",
                    "rightValue": "delete-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "delete-event"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -3568,
        -224
      ],
      "id": "c0567e98-fc83-47d2-87cc-037e283cbdd4",
      "name": "Switch1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('data').first().json.event_date }} - Evento de {{ $('data').first().json.event_duration }} minutos",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=## CONTEXTO:\n\nTu tarea es analizar el mensaje del usuario y averiguar si el horario mencionado est\u00e1 disponible.\n\n---\n\nHoy es: {{ $now.setLocale('es').format('EEEE d \\'de\\' MMMM\\' del\\' yyyy \\'y son las\\' h:mma') }}\nLa duraci\u00f3n del evento es: {{ $('data').first().json.event_duration }} minutos.\nEl periodo de la ma\u00f1ana va desde las 12:00am a las 12:00pm.\nEl periodo de la tarde va desde las 12:00pm a las 18:00pm.\nEl periodo de la noche va desde las 18:00pm a las 12:00am.\nEl \u00fanico horario que puedes agendar es: {{ $('data').first().json.ranges_to_schedule }}\n\n---\n\n## INFORMACI\u00d3N PARA RETORNAR:\n\n- \"event_from\": Si el usuario menciona una hora espec\u00edfica debes usar esa hora, pero si es m\u00e1s gen\u00e9rico y dice un d\u00eda o una ma\u00f1ana, tarde o noche debes buscar en ese periodo. (usa formato ISO, ahora es {{ $now.toISO() }})\n\n- \"event_to\": Si el usuario menciona una hora espec\u00edfica debes usar esa hora + la duraci\u00f3n del evento para saber el valor de \"to\", pero si dice un d\u00eda o una ma\u00f1ana, tarde o noche debes considerar el horario en el que finaliza ese periodo. (usa formato ISO, ahora es {{ $now.toISO() }})\n\n- \"available\": `true` o `false` dependiendo de lo que te retorno la herramienta \"get-availability\".\n\n- \"fallback\": Completa este campo \u00fanicamente con las 3 siguientes opciones (no puede usarlo para ninguna otra cosa):\n  1. Si no fue especificado ning\u00fan dia u horario.\n  2. Si no hay disponibilidad en el horario mencionado.\n  3. Si fue especificado un rango (no una hora espec\u00edfica) y hay m\u00e1s de un horario disponible informa cuales son estos horarios.\n\n---\n\n## REGLAS:\n\n- Usa la herramienta `get_availability` para saber si hay disponibilidad en el horario requerrido.\n- Si el usuario inform\u00f3 una hora espec\u00edfica y hay disponibilidad no ofrezcas m\u00e1s opciones, usa ese hora.\n- Si el usuario busca en un rango (ejemplo: el dia x, o a la tarde o a la ma\u00f1ana) debes usar la herramienta `get_availability` todas las veces que sea necesario en bloques de {{ $('data').first().json.event_duration }} minutos y retornar todas las opciones disponibles en el campo \"fallback\"\n\n---\n\n## RESPUESTA:\n\nSiempre responde SOLO con un objeto JSON v\u00e1lido, sin texto adicional. El JSON debe tener esta estructura exacta:\n\n{\n\"event_from\": \"string\",\n\"event_to\": \"string\",\n\"available\": boolean,\n\"fallback\": \"string | null\"\n}\n\n---\n\n## EJEMPLOS:\n\nEjemplo de entrada: \"viernes a las 3PM - evento de 75 minutos\" (no hace falta dar opciones porque hay disponibilidad en el horario espec\u00edfico que mencion\u00f3 el usuario)\n\nEjemplo de salida JSON:\n{\n\"event_from\": \"2025-10-24T15:00:00.000-03:00\",\n\"event_to\": \"2025-10-24T16:15:00.000-03:00\",\n\"available\": true,\n\"fallback\": null\n}\n\nEjemplo de entrada: \"Hoy a la tarde - Evento de 60 minutos\"\n\nEjemplo de salida JSON:\n{\n\"event_from\": \"2025-10-24T13:00:00.000-03:00\",\n\"event_to\": \"2025-10-24T18:00:00.000-03:00\",\n\"available\": true,\n\"fallback\": \"Hay dos horarios disponibles para hoy viernes 24 a la tarde: hay a las 15hs y a las 16hs. Cu\u00e1l te queda mejor?\"\n}\n\nEjemplo de entrada: \"Pr\u00f3ximo lunes - Evento de 30 minutos\"\n\nEjemplo de salida JSON:\n{\n\"event_from\": \"2025-10-27T08:00:00.000-03:00\",\n\"event_to\": \"2025-10-27T21:00:00.000-03:00\",\n\"available\": true,\n\"fallback\": \"Hay varios horarios disponibles para el lunes 27: hay a las 09hs, a las 09:30hs y a las 10hs. Cu\u00e1l te queda mejor?\"\n}\n\nEjemplo de entrada: \"Hoy a la tarde - Evento de 60 minutos\"\n\nEjemplo de salida JSON:\n{\n\"event_from\": \"[horario de inicio del periodo de la tarde]\",\n\"event_to\": \"[horario de fin del periodo de la tarde]\",\n\"available\": false,\n\"fallback\": \"Para hoy a la tarde no hay horarios disponibles, podemos buscar para otro d\u00eda?\"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1296,
        -592
      ],
      "id": "d66d89ce-fa99-456e-9804-b97fa5e8d2eb",
      "name": "set-date"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eb9f8afc-ee03-4e63-bc16-acd5957e9d0b",
              "leftValue": "={{ $json.output.available }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "ef525faa-88a5-46e4-9cd5-9cff8d877200",
              "leftValue": "={{ $json.output.fallback }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -784,
        -592
      ],
      "id": "b9f1773b-a4df-4532-aea8-3dc51122f1f4",
      "name": "If fallback 2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d4801fea-7ee9-4226-82a5-decf464f5e4c",
              "name": "output",
              "value": "={{ $('set-date').item.json.output.fallback }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -560,
        -448
      ],
      "id": "47ed313d-de68-4001-a055-d09e9d324614",
      "name": "Fallback 2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f17a3fee-751e-4221-b251-81b023643982",
                    "leftValue": "={{ $('data').first().json.operation }}",
                    "rightValue": "get-availability",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get-availability"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a52c5b0-b3e1-4b15-97f3-ba5cfb4e4260",
                    "leftValue": "={{ $('data').first().json.operation }}",
                    "rightValue": "create-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "create-event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f1dc42f1-100f-4570-9dee-1c60894aa61a",
                    "leftValue": "={{ $('data').first().json.operation }}",
                    "rightValue": "update-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "update-event"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -560,
        -688
      ],
      "id": "8b161458-f4b0-4210-87ec-c5f8a29a81da",
      "name": "Switch2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('data').first().json.query }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=## CONTEXTO:\n\nTu tarea es analizar el mensaje del usuario y averiguar el c\u00f3digo del evento al que se refiere.\n\n---\n\n## LOS EVENTOS DEL USUARIO:\n\n{{ $json.events.toJsonString() }}\n\n---\n\n## INFORMACI\u00d3N PARA RETORNAR:\n\n- \"event_code\": Completa este campo \u00fanicamente si sabes exactamente a que evento se refiere el usuario.\n\n- \"fallback\": Completa este campo \u00fanicamente si el usuario no aclar\u00f3 qu\u00e9 evento quiere modificar/eliminar, usa este campo para preguntarle cual de los eventos es el que desea modificar/cancelar.\n\n---\n\n## REGLAS:\n\n- \u00danicamente completa el campo \"event_code\" con el c\u00f3digo real del evento que tienes bajo el t\u00edtulo \"LOS EVENTOS DEL USUARIO\", nunca inventes un c\u00f3digo.\n- Nunca eligas un evento al azar, siempre debes basarte en la informaci\u00f3n espec\u00edfica que dice el usuario.\n- Si el usuario dio informaci\u00f3n espec\u00edfica de cual de los eventos se refiere entonces debes usar el \"event_code\" de ese evento. El usuario puede dar informaci\u00f3n espec\u00edfica informando el motivo del evento o la hora del mismo.\n\n---\n\n## RESPUESTA:\n\nSiempre responde SOLO con un objeto JSON v\u00e1lido, sin texto adicional. El JSON debe tener esta estructura exacta:\n\n{\n\"event_code\": \"string o null\",\n\"fallback\": \"string o null\"\n}\n\n---\n\n## EJEMPLOS:\n\nEjemplo de entrada: \"Cancelar turno\" (No fue especificado cual desea)\n\nEjemplo de salida JSON:\n{\n\"event_code\": null,\n\"fallback\": \"Tienes dos eventos, uno para el [mencionar dia y hora] y otro para el [mencionar dia y hora]. \u00bfCu\u00e1l quieres cancelar?\"\n}\n\nEjemplo de entrada: \"Actualizar mi turno de las 16hs para las 18hs\" (fue especificado el evento mencionando el horario del mismo)\n\nEjemplo de salida JSON:\n{\n\"event_code\": \"[event_code del evento]\",\n\"fallback\": null\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2416,
        192
      ],
      "id": "80b42607-082f-4815-9d89-662570cacc0e",
      "name": "set-event"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b44ad566-7d8b-4b1d-96cb-c2f516aeb464",
              "name": "=user_query",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "69f8ba88-8cac-4c44-bdfb-f10b03ca6eba",
              "name": "table_name",
              "value": "sinapzia_agenda",
              "type": "string"
            },
            {
              "id": "1bdad985-9c1d-49d8-a82c-305b49791f2f",
              "name": "from_calendar",
              "value": "688b6e729b7f5cf3f5ba66d058ac4b96ddf520350cc201c762696e38fb55839f@group.calendar.google.com",
              "type": "string"
            },
            {
              "id": "f86d4606-e178-40b2-8211-608819ac69e3",
              "name": "client_id",
              "value": "48984514735",
              "type": "string"
            },
            {
              "id": "729d4806-ab20-4eb2-b5c5-b66754790105",
              "name": "event_duration",
              "value": "60",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4464,
        16
      ],
      "id": "3d594115-717a-4e35-8f1d-c40b8dbb217a",
      "name": "data1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bd619115-f181-4191-a080-55c397e4eaf0",
              "leftValue": "={{ $json.isValid }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3792,
        112
      ],
      "id": "803cdb46-be8f-4f4b-92e7-40bc880e90a0",
      "name": "If valid"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "53a6e143-2a62-42c5-9883-600b0ba653d3",
              "name": "output",
              "value": "={{ $('validation').item.json.fallback }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3568,
        224
      ],
      "id": "ba18d903-cb6b-40b3-9614-c59bbd704b75",
      "name": "Fallback"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "={{ $('data').item.json.table_name }}",
        "limit": 5,
        "filters": {
          "conditions": [
            {
              "keyName": "client_id",
              "condition": "eq",
              "keyValue": "={{ $('data').item.json.client_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3248,
        -80
      ],
      "id": "ba643a07-8e9c-4b66-8ea4-aa49c4812431",
      "name": "Get events",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "P1SLKYyLcSTAAHKz",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ed315324-de80-4479-8fe2-b4008064f29e",
                    "leftValue": "={{ $input.all().length }}",
                    "rightValue": 1,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "1"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "75b51850-ce7d-44d2-99e7-485715ba6058",
                    "leftValue": "={{ $input.all().length }}",
                    "rightValue": 1,
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "> 1"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -3120,
        144
      ],
      "id": "97655f3a-2e5f-49ad-bb1e-614dc56e6f76",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "={{ $('data').item.json.table_name }}",
        "limit": 5,
        "filters": {
          "conditions": [
            {
              "keyName": "client_id",
              "condition": "eq",
              "keyValue": "={{ $('data').item.json.client_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3344,
        160
      ],
      "id": "4fa80a0b-981e-4508-8de0-670f897b60d4",
      "name": "Get events1",
      "credentials": {
        "supabaseApi": {
          "id": "P1SLKYyLcSTAAHKz",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e3ca4e72-90f3-450e-9b52-e794b14ba885",
              "name": "events",
              "value": "={{ $json.events }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2672,
        192
      ],
      "id": "6905cad6-c5cb-492c-a145-00c42da3c018",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('data').first().json.operation }}",
                    "rightValue": "update-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "dd4a5e54-05e2-4db4-bc5c-b7777427cf73"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "update-event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7bcedc56-1043-46da-bdc3-87e6c8c4650b",
                    "leftValue": "={{ $('data').first().json.operation }}",
                    "rightValue": "delete-event",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "delete-event"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -1616,
        -112
      ],
      "id": "ce17faad-db5f-43a9-8ee7-576a98193d85",
      "name": "Update or delete?"
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "={{ $('data').first().json.calendar_id }}",
          "mode": "id"
        },
        "eventId": "={{ $('set-event').item.json.output.event_code }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -1376,
        128
      ],
      "id": "7dff0abc-2d16-4ebb-be78-fd878aed9ab1",
      "name": "Delete event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "50yXq9hmQsaDJ5D7",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "={{ $('data').first().json.calendar_id }}",
          "mode": "id"
        },
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start_Time', ``, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End_Time', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -1136,
        -368
      ],
      "id": "65fe63a6-cd93-47f1-a5ba-dfa485495c13",
      "name": "get-availability",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "50yXq9hmQsaDJ5D7",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "={{ $('data').item.json.calendar_id }}",
          "mode": "id"
        },
        "start": "={{ $('set-date').item.json.output.event_from }}",
        "end": "={{ $('set-date').item.json.output.event_to }}",
        "additionalFields": {
          "description": "={{ $('data').item.json.client_id }}",
          "summary": "={{ $('data').item.json.event_reason }} - {{ $('data').item.json.client_name }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -336,
        -576
      ],
      "id": "6086459a-e3c5-4689-80ed-bb1be71bf24a",
      "name": "Create an event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "50yXq9hmQsaDJ5D7",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "={{ $('data').first().json.calendar_id }}",
          "mode": "id"
        },
        "eventId": "={{ $('set-event').item.json.output.event_code }}",
        "updateFields": {
          "end": "={{ $('set-date').item.json.output.event_to }}",
          "start": "={{ $('set-date').item.json.output.event_from }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -336,
        -384
      ],
      "id": "c4fb732e-0dcb-4c55-a742-b5f7518d0a71",
      "name": "Update an event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "50yXq9hmQsaDJ5D7",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4612d61a-c241-4b9d-a1e0-c8aa171a08c5",
              "name": "output",
              "value": "Evento creado exitosamente.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        -576
      ],
      "id": "df731192-c0e3-47f2-b1e5-33e4cac5b4fc",
      "name": "Output: event created"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bf42c887-3c42-43b7-85c9-a4043278621c",
              "name": "output",
              "value": "Evento modificado exitosamente.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        -384
      ],
      "id": "349b7751-2c31-4194-a3cf-0b362a123ce9",
      "name": "Output: event changed"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "030ca476-a2b7-4f13-9544-8038c4efe058",
              "name": "output",
              "value": "Hay disponibilidad",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -336,
        -768
      ],
      "id": "5ab058fa-583c-41dc-a9ad-be888d4464af",
      "name": "Output: availability true"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "293d1b4a-5ad5-4621-8b91-117c40919d9c",
              "name": "output",
              "value": "Evento cancelado correctamente.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -928,
        128
      ],
      "id": "6e77715e-beed-4676-98dd-479978bd6a4e",
      "name": "Output: event deleted"
    },
    {
      "parameters": {
        "tableId": "={{ $('data').item.json.table_name }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "client_id",
              "fieldValue": "={{ $('data').item.json.client_id }}"
            },
            {
              "fieldId": "calendar_id",
              "fieldValue": "={{ $('data').item.json.calendar_id }}"
            },
            {
              "fieldId": "event_code",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "event_at",
              "fieldValue": "={{ $json.start.dateTime }}"
            },
            {
              "fieldId": "Title",
              "fieldValue": "={{ $json.summary }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -112,
        -576
      ],
      "id": "5f897cae-de9b-441c-a61e-9fcfb46c418e",
      "name": "Create a row",
      "credentials": {
        "supabaseApi": {
          "id": "P1SLKYyLcSTAAHKz",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8c54c2b7-f0b8-4a71-9650-e0904cd3e103",
              "name": "output",
              "value": "No tenes eventos agendados.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2896,
        384
      ],
      "id": "3e8ecf32-ae78-4347-8337-22ea39d36acc",
      "name": "Output: No events"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "01000c29-73ef-46c0-ad1d-c7c01ffc7ca9",
              "leftValue": "={{ $json.output.fallback }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1904,
        192
      ],
      "id": "f677cf48-2f16-449d-86da-edbd82113546",
      "name": "If fallback"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "160cd71b-6528-4303-8dce-5c1884b7a2ff",
              "name": "output",
              "value": "={{ $json.output.fallback }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1696,
        288
      ],
      "id": "10ae0704-d15e-4501-a728-c31e876358b6",
      "name": "Output: Fallback"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const output = $input.first().json;\n  let validation = {\n    isValid: true,\n    fallback: ''\n  };\n\n  switch (output.operation) {\n    case 'get-availability':\n      if (!output.event_date) {\n        validation.isValid = false;\n        validation.fallback = 'Para saber disponibilidad necesito un d\u00eda u hora';\n      }\n      break;\n\n    case 'create-event':\n      if (!output.event_date || !output.client_name || !output.event_reason) {\n        validation.isValid = false;\n        validation.fallback = 'Para crear un evento necesito saber el d\u00eda u hora, el nombre del cliente y el motivo';\n      }\n      break;\n\n    case 'get-events':\n    case 'delete-event':\n      break;\n\n    case 'update-event':\n      if (!output.event_date) {\n        validation.isValid = false;\n        validation.fallback = 'Para actualizar un evento necesito un d\u00eda u hora';\n      }\n      break;\n\n    default:\n      validation.isValid = false;\n      validation.fallback = 'Operaci\u00f3n no reconocida';\n  }\n\n  return {\n    json: validation\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4016,
        112
      ],
      "id": "a4a2194c-7059-4b31-bed8-066529de279e",
      "name": "validation"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nif (items.length === 0 || items.every(item => !item.json || Object.keys(item.json).length === 0)) {\n  return [{ json: { message: \"No ten\u00e9s ning\u00fan evento agendado.\" } }];\n}\n\nconst unifiedEvents = items\n  .filter(item => item.json && item.json.event_at && !isNaN(new Date(item.json.event_at).getTime()))\n  .map(item => {\n    const eventAt = new Date(item.json.event_at);\n    eventAt.setHours(eventAt.getHours() - 3);\n\n    return {\n      calendar_id: item.json.calendar_id,\n      event_code: item.json.event_code,\n      event_at: eventAt.toISOString(),\n      event_title: item.json.Title\n    };\n  });\n\nif (unifiedEvents.length === 0) {\n  return [{ json: { message: \"No ten\u00e9s ning\u00fan evento agendado.\" } }];\n}\n\nreturn [{ json: { events: unifiedEvents } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3024,
        -80
      ],
      "id": "1da81f4f-995a-42ce-a38d-da9ea48389d2",
      "name": "output-events",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst unifiedEvents = items.map(item => {\n  const eventAt = new Date(item.json.event_at);\n  eventAt.setHours(eventAt.getHours() - 3);\n  \n  return {\n    calendar_id: item.json.calendar_id,\n    event_code: item.json.event_code,\n    event_at: eventAt.toISOString(),\n    Title: item.json.Title\n  };\n});\n\nreturn [{ json: { events: unifiedEvents } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2896,
        192
      ],
      "id": "ece06a34-bd03-4b4c-b9b1-e0b5102eef49",
      "name": "unify-events"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete a row": {
      "main": [
        [
          {
            "node": "Output: event deleted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "set-event",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "set-event",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "data": {
      "main": [
        [
          {
            "node": "validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "set-event",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Output: event changed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "set-date",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "set-date",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "set-date",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "set-date",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "set-date",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get events1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get events1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set-date": {
      "main": [
        [
          {
            "node": "If fallback 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If fallback 2": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fallback 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Output: availability true",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create an event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update an event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set-event": {
      "main": [
        [
          {
            "node": "If fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data1": {
      "main": [
        [
          {
            "node": "data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If valid": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get events": {
      "main": [
        [
          {
            "node": "output-events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Update or delete?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "unify-events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Output: No events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get events1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "set-event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update or delete?": {
      "main": [
        [
          {
            "node": "set-date",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete event": {
      "main": [
        [
          {
            "node": "Delete a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-availability": {
      "ai_tool": [
        [
          {
            "node": "set-date",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create an event": {
      "main": [
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update an event": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row": {
      "main": [
        [
          {
            "node": "Output: event created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If fallback": {
      "main": [
        [
          {
            "node": "Update or delete?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Output: Fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validation": {
      "main": [
        [
          {
            "node": "If valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "unify-events": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}